version: 2.1

orbs:
  cypress: cypress-io/cypress@3
  slack: circleci/slack@4.10.1

parameters:
  workflow_id:
    type: string
    default: ${CIRCLE_WORKFLOW_ID:0:7}

commands:
  destroy-environment:
    description: Destroy front-end cloudformation stacks given a workflow ID.
    parameters:
      destroy_workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://onlinesafety-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name onlinesafety-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      revert_workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            cd ~/project/frontend

            if [ -f "constants.zip" ]; then
                unzip -o constants.zip -d .
                rm constants.zip
            else
                echo "constants.zip file not found."
            fi


jobs:
  build-frontend:
    docker:
      - image: cimg/node:18.14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            yarn
            yarn build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:18.14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            yarn
            yarn build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:18.14
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - cypress/run:
          package-manager: 'yarn'
          start-command: 'yarn test'

  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:18.14
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test Backend
          command: |
            cd backend
            yarn
            yarn test

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip

      - run:
          name: Ensure front-end infrastructure exist (Initial Stack)
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=OnlineSafety \
              --stack-name "onlinesafety-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"


      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:

      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout

      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs yarn tree aws-cli
      - run:
          name: Deploy backend
          command: |
            # your code here
            echo "Contents  of the frontend\constants\contractAddresses.json before deploy"
            cat frontend\constants\contractAddresses.json
            cd backend
            yarn
            yarn deploy
            cd ..

            echo "Contents  of the frontend\constants\contractAddresses.json after deploy"
            cat frontend\constants\contractAddresses.json
            zip -r constants.zip *
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs yarn curl aws-cli

      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            yarn
            yarn build
            yarn export
            aws s3 cp out s3://onlinesafety-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          revert_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache curl aws-cli tar gzip nodejs npm
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            expected_title="Online Safety Game"
            url="https://chainlink-hack-frontend.vercel.app/"

            # Fetch the title using curl and extract the text between <title> tags
            title=$(curl -s "$url" | grep -oP '(?<=<title>)[^<]+')

            # Compare the fetched title with the expected title
            if [[ "$title" == "$expected_title" ]]; then
                echo "Title is correct: $title"
                return 0
            else
                echo "Title is not correct: $title"
                return 1
            fi


      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          revert_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=OnlineSafety

            echo "Old WorkflowID is $OldWorkflowID"
            echo "New WorkflowID is ${CIRCLE_WORKFLOW_ID:0:7}"

      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          revert_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
      
      - attach_workspace:
          at: ~/

      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 

            echo "New WorkflowID is ${CIRCLE_WORKFLOW_ID:0:7}"
            echo Stack names: "${STACKS[@]}"  
            echo "${CIRCLE_WORKFLOW_ID:0:7}"

            for i in "${STACKS[@]}"; do
            
              echo "On stack: $i"

              if [[ "$i" != "onlinesafety-frontend-${CIRCLE_WORKFLOW_ID:0:7}" ]] && [[ "$i" =~ "onlinesafety" ]]
              then
                echo "   *********** Old Stack Found   *************    "
                echo "On stack with affix: ${i: -7}"

                aws s3 rm "s3://onlinesafety-${i: -7}" --recursive

                aws cloudformation delete-stack --stack-name "onlinesafety-frontend-${i: -7}"
              else 
                echo "   ***********  Old Stack NOT Found   *************    "
              fi

            done


          
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          revert_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
