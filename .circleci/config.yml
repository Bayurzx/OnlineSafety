version: 2.1

orbs:
  slack: circleci/slack@4.10.1

parameters:
  workflow_id:
    type: string
    default: ${CIRCLE_WORKFLOW_ID:0:7}

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      destroy_workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      revert_workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert

jobs:
  build-frontend:
    docker:
      - image: cimg/node:18.14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:18.14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:18.14
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:18.14
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:18.14
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan and Audit Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      # Alerts
      - slack/notify:
          channel: "C03RFUC0BDW, C03QP7VHQTF"
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: "C03RFUC0BDW, C03QP7VHQTF"
          event: pass
          template: basic_success_1

  scan-backend:
    docker:
      - image: cimg/node:18.14
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan and Audit Backend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      # Alerts
      - slack/notify:
          channel: "C03RFUC0BDW, C03QP7VHQTF"
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: "C03RFUC0BDW, C03QP7VHQTF"
          event: pass
          template: basic_success_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text) >> ~/project/.circleci/ansible/inventory
            cat ~/project/.circleci/ansible/inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "d6:6c:8c:8b:58:73:3d:27:10:20:67:0c:1e:7e:d1:8a"

      # attach workspace
      - attach_workspace:
          at: ~/

      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update --no-cache tar gzip ansible aws-cli
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install deps
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb or memstash
          command: |
            # Your code here
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # If you are using kvdb.io, generate the bucket ID "P5thQCXKuMdbXnoXdEHU3o" in your local terminal first
                  curl https://kvdb.io/981qXwizoq758yeL6c3Gc4/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          revert_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          revert_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "d6:6c:8c:8b:58:73:3d:27:10:20:67:0c:1e:7e:d1:8a"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs npm tree aws-cli ansible
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/

            cd .circleci/ansible
            echo "Contents  of the inventory file is -------"
            cat inventory
            ansible-playbook -i inventory deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          revert_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.10-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache curl aws-cli tar gzip nodejs npm
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)

            # Fetch and prepare the BACKEND_IP env var
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "API_URL is ${API_URL}"
            echo "Current workflow is ${CIRCLE_WORKFLOW_ID:0:7}"

            # if curl "${API_URL}" | grep "ok"
            if curl -s -v --connect-timeout 30 --retry-connrefused 10 "${API_URL}" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo "URL"  :  $URL 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          revert_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=Udapeople

            echo "Old WorkflowID is $OldWorkflowID"
            echo "New WorkflowID is ${CIRCLE_WORKFLOW_ID:0:7}"

      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          revert_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
      
      - attach_workspace:
          at: ~/

      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 

            echo "New WorkflowID is ${CIRCLE_WORKFLOW_ID:0:7}"
            echo Stack names: "${STACKS[@]}"  
            echo "${CIRCLE_WORKFLOW_ID:0:7}"

            for i in "${STACKS[@]}"; do
            
              echo "On stack: $i"

              if [[ "$i" != "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" ]] && [[ "$i" != "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" ]] && [[ "$i" =~ "udapeople" ]]
              then
                echo "   *********** Old Stack Found   *************    "
                echo "On stack with affix: ${i: -7}"

                aws s3 rm "s3://udapeople-${i: -7}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${i: -7}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${i: -7}"
              else 
                echo "   ***********  Old Stack NOT Found   *************    "
              fi

            done


          
      - destroy-environment:
          destroy_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          revert_workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
